class Solution {
    private int mod = (int)1e9 + 7;
    private int helper(int s, int e, int k, int[][] dp){
        if(k==0){
            if(s==e){
                return 1;
            }else{
                return 0;
            }
        }

        if(dp[s][k] != -1) return dp[s][k];

        int left = helper(s-1, e, k-1, dp);
        int right = helper(s+1, e, k-1, dp);

        return dp[s][k] = (left+right)%mod;
    }
    public int numberOfWays(int startPos, int endPos, int k) {
        int[][] dp = new int[2*(startPos+k)][k+1];
        for(int[] e:dp){
            Arrays.fill(e, -1);
        }
        int maxDist = Math.abs(startPos-k);

        int ans = helper(startPos+maxDist, endPos+maxDist, k, dp);

        return ans;
    }
}
