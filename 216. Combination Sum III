class Solution {
    private void backtrack(int start, int k, int n, List<Integer> curr, List<List<Integer>> result) {
        if (k == 0 && n == 0) {
            result.add(new ArrayList<>(curr));
            return;
        }

        for (int i = start; i <= 9; i++) {
            if (i > n) {
                break; 
            }

            curr.add(i);
            backtrack(i + 1, k - 1, n - i, curr, result);
            curr.remove(curr.size() - 1);  
        }
    }
		
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(1, k, n, new ArrayList<>(), result);
        return result;
    }
}
