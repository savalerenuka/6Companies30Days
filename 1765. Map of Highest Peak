class Solution {
    private class Pair{
        int first;
        int second;
        Pair(int first, int second){
            this.first = first;
            this.second = second;
        }
    }
    public int[][] highestPeak(int[][] isWater) {
        int m = isWater.length;
		int n = isWater[0].length;
		int result[][] = new int[m][n];
		Queue<Pair> q = new LinkedList<>();

        for(int i=0; i<m; i++) {
			for(int j=0; j<n; j++) {
				if(isWater[i][j] == 1) {
					q.add(new Pair(i, j));
					result[i][j] = 0;
				}else {
					result[i][j] = -1;
				}
			}
		}

        int dr[] = {1, 0, -1, 0};
        int dc[] = {0, 1, 0, -1};

        while(!q.isEmpty()){
            Pair curr = q.poll();
            int r = curr.first;
            int c = curr.second;

            for(int i=0; i<4; i++){
                int nr = r + dr[i];
                int nc = c + dc[i];

                if(nr>=0 && nr<m && nc>=0 && nc<n){
                    if(result[nr][nc] == -1){
                        result[nr][nc] = result[r][c] + 1;
                        q.add(new Pair(nr, nc));
                    }
                }
            }
        }

        return result;
        
    }
}
